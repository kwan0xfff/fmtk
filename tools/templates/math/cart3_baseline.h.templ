// Protected data and software implementation for class ${clasnm}.

#ifndef _${ns}_${clasnm}_baseline_h_
#define _${ns}_${clasnm}_baseline_h_

#ifdef _${CLASNM}_DATA_DEFN
#define _${CLASNM}_DATA ${stype} elem[4]
    // Assist compiler in alignment; specify 4 instead of 3 elements.
#endif // _${CLASNM}_DATA_DEFN

#include <cmath>

namespace ${ns} {

// basic constructors and destructors

inline ${clasnm}::${clasnm}() { }

inline ${clasnm}::~${clasnm}() { }

inline ${clasnm}::${clasnm}(${stype} s0, ${stype} s1, ${stype} s2)
{
    elem[0] = s0; elem[1] = s1; elem[2] = s2;
}

// copy constructor

inline ${clasnm}&
${clasnm}::operator = (const ${clasnm}& v)
{
    elem[0] = v.elem[0]; elem[1] = v.elem[1]; elem[2] = v.elem[2];
    return *this;
}

// compound assignment operators

inline ${clasnm}&
${clasnm}::operator += (const ${clasnm}& v)
{
    elem[0] += v.elem[0]; elem[1] += v.elem[1]; elem[2] += v.elem[2];
    return *this;
}

inline ${clasnm}&
${clasnm}::operator -= (const ${clasnm}& v)
{
    elem[0] -= v.elem[0]; elem[1] -= v.elem[1]; elem[2] -= v.elem[2];
    return *this;
}

inline ${clasnm}&
${clasnm}::operator *= (const ${stype} s)
{
    elem[0] *= s; elem[1] *= s; elem[2] *= s; 
    return *this;
}

inline ${clasnm}&
${clasnm}::operator /= (const ${stype} s)
{
    ${stype} si = 1.0 / s;
    elem[0] *= si; elem[1] *= si; elem[2] *= si; 
    return *this;
}

// index operators

inline ${stype}&
${clasnm}::operator [] (int i)
{
    return elem[i];
}

inline ${stype}
${clasnm}::operator [] (int i) const
{
    return elem[i];
}

// binary operators - additive

inline const ${clasnm}
${clasnm}::operator + (const ${clasnm}& v) const
{
    ${clasnm} tmp;
    tmp.elem[0] = elem[0] + v.elem[0];
    tmp.elem[1] = elem[1] + v.elem[1];
    tmp.elem[2] = elem[2] + v.elem[2];
    return tmp;
}

inline const ${clasnm}
${clasnm}::operator - (const ${clasnm}& v) const
{
    ${clasnm} tmp;
    tmp.elem[0] = elem[0] - v.elem[0];
    tmp.elem[1] = elem[1] - v.elem[1];
    tmp.elem[2] = elem[2] - v.elem[2];
    return tmp;
}

inline const ${clasnm}
${clasnm}::operator * (${stype} s) const
{
    ${clasnm} tmp;
    tmp.elem[0] = elem[0] * s;
    tmp.elem[1] = elem[1] * s;
    tmp.elem[2] = elem[2] * s;
    return tmp;
}

inline const ${clasnm}
${clasnm}::operator / (${stype} s) const
{
    // TODO: if 's' is zero, then should anticipate divide by zero.
    ${clasnm} tmp;
    ${stype} si;
    si = 1.0/s;
    tmp.elem[0] = elem[0] * si;
    tmp.elem[1] = elem[1] * si;
    tmp.elem[2] = elem[2] * si;
    return tmp;
}

inline const ${clasnm}
${clasnm}::operator ^ (const ${clasnm}& v) const
{
    // cross product
    ${clasnm} tmp;
    tmp.elem[0] = elem[1] * v.elem[2];
    tmp.elem[1] = elem[2] * v.elem[0];
    tmp.elem[2] = elem[0] * v.elem[1];
    return tmp;
}

inline ${stype}
${clasnm}::operator * (const ${clasnm}& v) const
{
    // dot product
    ${stype} tmp;
    tmp  = elem[0] * v.elem[0];
    tmp += elem[1] * v.elem[1];
    tmp += elem[2] * v.elem[2];
    return tmp;
}

inline ${clasnm}
operator * (const ${stype} s, const ${clasnm}& v)
{
    ${clasnm} tmp;
    tmp.elem[0] = v.elem[0] * s;
    tmp.elem[1] = v.elem[1] * s;
    tmp.elem[2] = v.elem[2] * s;
    return tmp;
}


// unary operators

inline const ${clasnm}
${clasnm}::operator - () const
{
    return (${clasnm}(-elem[0], -elem[1], -elem[2]));
}

// comparison operators

inline bool
${clasnm}::operator == (const ${clasnm}& v) const
{
    bool result;
    result = (
        (elem[0] == v.elem[0]) &&
        (elem[1] == v.elem[1]) &&
        (elem[2] == v.elem[2]));
    return result;
}

inline bool
${clasnm}::operator != (const ${clasnm}& v) const
{
    bool result;
    result = (
        (elem[0] != v.elem[0]) ||
        (elem[1] != v.elem[1]) ||
        (elem[2] != v.elem[2]));
    return result;
}

inline bool
${clasnm}::operator < (const ${clasnm}& v) const
{
    bool result;
    result = (
        (elem[0] < v.elem[0]) &&
        (elem[1] < v.elem[1]) &&
        (elem[2] < v.elem[2]));
    return result;
}

// set value functions
//
inline void
${clasnm}::set_zero()
{
    elem[0] = 0.0f; elem[1] = 0.0f; elem[2] = 0.0f;
}

inline void
${clasnm}::set( ${stype} s0, ${stype} s1, ${stype} s2)
{
    elem[0] = s0; elem[1] = s1; elem[2] = s2;
}

inline void
${clasnm}::set( const ${clasnm}& v)
{
    elem[0] = v.elem[0]; elem[1] = v.elem[1]; elem[2] = v.elem[2];
}

// length and normalization functions

inline ${stype}
${clasnm}::length () const
{
    ${stype} l2 = length2();
    return sqrtf(l2);
}

inline ${stype}
${clasnm}::length2 () const
{
    return elem[0]*elem[0] + elem[1]*elem[1] + elem[2]*elem[2];
}

inline ${stype}
${clasnm}::normalize ()
{
    ${stype} len = sqrtf(length2());
    ${stype} si = 1.0f/len;
    elem[0] *= si;
    elem[1] *= si;
    elem[2] *= si;
    return len;
}

} // namespace ${ns}

#endif // _${ns}_${clasnm}_baseline_h_

